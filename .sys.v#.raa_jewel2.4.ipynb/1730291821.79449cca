{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "da9db4c4-3412-48e9-bbcc-80dca8135930",
   "metadata": {},
   "outputs": [],
   "source": [
    "import yoda\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# Função para obter dados experimentais do ATLAS\n",
    "def DataFromExperiment(file, scatter, min=0, max=0):\n",
    "    data = yoda.read(file)[scatter]\n",
    "    if max == 0:\n",
    "        if scatter == '/REF/ATLAS_2018_I1673184/d19-x01-y01':\n",
    "            max = len(data.xVals())\n",
    "        else:\n",
    "            max = len(data.xVals())\n",
    "    x = np.asarray(data.xVals())[min:max]\n",
    "    y = np.asarray(data.yVals())[min:max]\n",
    "    err = np.asarray((data.yMaxs() - data.yMins()) / 2)[min:max]\n",
    "    errx = np.asarray((data.xMaxs() - data.xMins()) / 2)[min:max]\n",
    "    return [x, y, err, errx]\n",
    "\n",
    "plt.style.use('plotconfig.mplstyle')\n",
    "\n",
    "# Definição de variáveis e arquivos YODA\n",
    "R = 0.4\n",
    "CENTS = ['0-10']\n",
    "\n",
    "#yodapp = '/eos/user/m/mdemelop/Jewel_analysis/yoda_merge_files/pp_j245T_wrec_0410/pp_5020_raa_R' + str(R) + '.yoda'\n",
    "yodapp = '/eos/user/m/mdemelop/Jewel_analysis/yoda_merge_files/pp_j245T_2510/pp_5020_raa_R' + str(R) + '.yoda'\n",
    "yodaPbPb_def_wo = '/eos/user/m/mdemelop/Jewel_analysis/yoda_merge_files/simple_0410_j2.4_Pb_5T_worec/'+str(CENTS[0])+'_raa_R' + str(R) + '.yoda'\n",
    "#yodaPbPb_def_w = '/eos/user/m/mdemelop/Jewel_analysis/yoda_merge_files/simple_0410_j2.4_Pb_5T_wrec/'+str(CENTS[0])+'_raa_R' + str(R) + '.yoda'\n",
    "yodaPbPb_def_w = '/eos/user/m/mdemelop/Jewel_analysis/yoda_merge_files/simple_2510_j2.4_5T_wrec/'+str(CENTS[0])+'_raa_R' + str(R) + '.yoda'\n",
    "yodaPbPb_vusp_wo = '/eos/user/m/mdemelop/Jewel_analysis/yoda_merge_files/flow_0410_j2.4_Pb_5T_worec/'+str(CENTS[0])+'_raa_R' + str(R) + '.yoda'\n",
    "yodaPbPb_vusp_w = '/eos/user/m/mdemelop/Jewel_analysis/yoda_merge_files/flow_2510_j2.4_5T_wrec/'+str(CENTS[0])+'_raa_R' + str(R) + '.yoda'\n",
    "\n",
    "\n",
    "\n",
    "obs = '/USPJWL_JETSPEC/JetpT_R' + str(R)\n",
    "\n",
    "# Leitura dos arquivos YODA\n",
    "histos_pp = yoda.read(yodapp)\n",
    "histos_PbPb_def_wo = yoda.read(yodaPbPb_def_wo)\n",
    "histos_PbPb_def_w = yoda.read(yodaPbPb_def_w)\n",
    "histos_PbPb_vusp_wo = yoda.read(yodaPbPb_vusp_wo)\n",
    "histos_PbPb_vusp_w = yoda.read(yodaPbPb_vusp_w)\n",
    "\n",
    "\n",
    "pp_jet = histos_pp[obs]\n",
    "PbPb_jet_def_wo = histos_PbPb_def_wo[obs]\n",
    "PbPb_jet_def_w = histos_PbPb_def_w[obs]\n",
    "PbPb_jet_vusp_wo = histos_PbPb_vusp_wo[obs]\n",
    "PbPb_jet_vusp_w = histos_PbPb_vusp_w[obs]\n",
    "\n",
    "\n",
    "# Normalização dos eventos\n",
    "pp_evtc = histos_pp['/_EVTCOUNT'].sumW()\n",
    "pp_xsec = histos_pp['/_XSEC'].point(0).x()\n",
    "pp_jet.scaleW(pp_xsec / pp_evtc)\n",
    "\n",
    "PbPb_evtc_def_wo = histos_PbPb_def_wo['/_EVTCOUNT'].sumW()\n",
    "PbPb_xsec_def_wo = histos_PbPb_def_wo['/_XSEC'].point(0).x()\n",
    "PbPb_jet_def_wo.scaleW(PbPb_xsec_def_wo / PbPb_evtc_def_wo)\n",
    "\n",
    "PbPb_evtc_def_w = histos_PbPb_def_w['/_EVTCOUNT'].sumW()\n",
    "PbPb_xsec_def_w = histos_PbPb_def_w['/_XSEC'].point(0).x()\n",
    "PbPb_jet_def_w.scaleW(PbPb_xsec_def_w / PbPb_evtc_def_w)\n",
    "\n",
    "PbPb_evtc_vusp_wo = histos_PbPb_vusp_wo['/_EVTCOUNT'].sumW()\n",
    "PbPb_xsec_vusp_wo = histos_PbPb_vusp_wo['/_XSEC'].point(0).x()\n",
    "PbPb_jet_vusp_wo.scaleW(PbPb_xsec_vusp_wo / PbPb_evtc_vusp_wo)\n",
    "\n",
    "PbPb_evtc_vusp_w = histos_PbPb_vusp_w['/_EVTCOUNT'].sumW()\n",
    "PbPb_xsec_vusp_w = histos_PbPb_vusp_w['/_XSEC'].point(0).x()\n",
    "PbPb_jet_vusp_w.scaleW(PbPb_xsec_vusp_w / PbPb_evtc_vusp_w)\n",
    "\n",
    "# # Rebin dos dados\n",
    "# pp_jet.rebin(2)\n",
    "# PbPb_jet_vusp_wo.rebin(2)\n",
    "# PbPb_jet_vusp_w.rebin(2)\n",
    "# PbPb_jet_vusp_wo.rebin(2)\n",
    "# PbPb_jet_vusp_w.rebin(2)\n",
    "\n",
    "\n",
    "# Cálculo do RAA para cada configuração\n",
    "raa_def_wo = PbPb_jet_def_wo / pp_jet\n",
    "raa_def_w = PbPb_jet_def_w / pp_jet\n",
    "raa_vusp_wo = PbPb_jet_vusp_wo / pp_jet\n",
    "raa_vusp_w = PbPb_jet_vusp_w / pp_jet\n",
    "\n",
    "# Preparação para o plot\n",
    "fig, ax = plt.subplots(figsize=(6, 4), dpi=800)\n",
    "\n",
    "# Função para plotar uma curva\n",
    "# def plot_raa(ax, raa, color, label, linestyle='--'):\n",
    "#     x = np.asarray(raa.xVals())\n",
    "#     y = np.asarray(raa.yVals())\n",
    "#     yerr = np.asarray((raa.yMaxs() - raa.yMins()) / 2)\n",
    "#     xerr = np.asarray((raa.xMaxs() - raa.xMins()) / 2)\n",
    "#     ax.fill_between(x, y - yerr, y + yerr, alpha=0.4, color=color)\n",
    "#     ax.plot(x, y, linestyle=linestyle, color=color, label=label)\n",
    "\n",
    "\n",
    "\n",
    "# Função para plotar uma curva com preenchimento\n",
    "def plot_raa(ax, raa, color, label, linestyle='--', alpha_fill=0.7, alpha_line=0.5):\n",
    "    x = np.asarray(raa.xVals())\n",
    "    y = np.asarray(raa.yVals())\n",
    "    yerr = np.asarray((raa.yMaxs() - raa.yMins()) / 2)\n",
    "    xerr = np.asarray((raa.xMaxs() - raa.xMins()) / 2)\n",
    "    \n",
    "    # Preenchendo erro em cada ponto individualmente\n",
    "    for k in range(len(x)):\n",
    "        xlow, xhigh = x[k] - xerr[k], x[k] + xerr[k]\n",
    "        ylow, yhigh = y[k] - yerr[k], y[k] + yerr[k]\n",
    "        ax.fill_between([xlow, xhigh], ylow, yhigh, color=color, alpha=alpha_fill)\n",
    "    \n",
    "    # Plotando a linha central\n",
    "    ax.plot(x, y, linestyle=linestyle, color=color, label=label, alpha=alpha_line)\n",
    "\n",
    "\n",
    "\n",
    "# Plotando as curvas\n",
    "plot_raa(ax, raa_def_wo, '#f9a03f', 'PbPb Default w/o Recoils')\n",
    "plot_raa(ax, raa_def_w, '#ee4266', 'PbPb Default w/ Recoils')\n",
    "plot_raa(ax, raa_vusp_wo, '#3bceac', 'PbPb vUSP w/o Recoils')\n",
    "plot_raa(ax, raa_vusp_w, '#540d6e', 'PbPb vUSP w/ Recoils')\n",
    "\n",
    "# Plot dos dados experimentais ATLAS\n",
    "ATLAS1 = DataFromExperiment('/eos/user/m/mdemelop/Jewel_analysis/yoda_merge_files/ATLAS/ATLAS_0-10_raa.yoda', '/REF/ATLAS_2018_I1673184/d19-x01-y01')\n",
    "ax.errorbar(*ATLAS1, color='#adb5bd', fmt='s', label='ATLAS', capsize=3, markersize=5, alpha=0.5)\n",
    "\n",
    "# Definições do gráfico\n",
    "ax.set_xlabel('$p_{T}$ (GeV)')\n",
    "ax.set_ylabel('$R_{AA}$')\n",
    "ax.axhline(y=1.0, color='gray', linestyle='--', alpha=0.6, linewidth=0.7)\n",
    "ax.legend(ncol=2,loc=2)\n",
    "ax.set_title(r'JEWEL2.4 $0{-}10\\%$', loc='left', fontsize=14)\n",
    "ax.set_title('R=0.4', loc='right', fontsize=14)\n",
    "\n",
    "ax.set_xlim([0, 1000])\n",
    "ax.set_ylim([0., 1.1])\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.savefig('./Figures/RAA_j2.4_PbPb_0-10_R0.4.pdf')\n",
    "plt.savefig('./Figures/RAA_j2.4_PbPb_0-10_R0.4.png')\n",
    "\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "063df9f2-1f46-4623-8035-825ce7885482",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
